
/* Ardafruit MotorShield code parts were manipulated from the Ardafruit Motorshield code written by Ardafruit Industries Software License Agreement (BSD License)
Copyright (c) 2012, Adafruit Industries.  All rights reserved.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The serial communication and keyboard commands code was manipulated from code wriiten by Orionrobots
The MIT License (MIT)

Copyright (c) 2013 Orionrobots

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

The various parts of this code were pieced together into this configuration by two students from Oberon High School.
Please observe the copyright and disclaimer notices above.
*/

#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_PWMServoDriver.h"
#include <SoftwareSerial.h>
SoftwareSerial bt(2,3); // RX, TX BlueTooth serial communication pins
#define COMMAND_LEFT 'a'
#define COMMAND_RIGHT 'd'
#define COMMAND_FORWARD 'w'
#define COMMAND_BACK 's'
#define COMMAND_STOP ' '

Adafruit_MotorShield AFMS = Adafruit_MotorShield(); //Creates the Ardafruit Motorshield object
Adafruit_DCMotor *myMotor1 = AFMS.getMotor(1); //Creates the motor object for motor 1
Adafruit_DCMotor *myMotor2 = AFMS.getMotor(2); //Creates the motor object for motor 2 (if you want to connect two more motors then do this for each and user motor ports 3 and 4)

void setup() {
AFMS.begin();

bt.begin(9600);//start the bluetooth serial port - send and recieve at 9600 baud
} 
void allOff(int speed)
{
  myMotor1->run(RELEASE);
  myMotor2->run(RELEASE);
}
 
void goForward(int speed)
{
  myMotor1->setSpeed(255);
  myMotor2->setSpeed(255);
  myMotor1->run(FORWARD);
  myMotor2->run(FORWARD);
}
 
void goBackward(int speed)
{
  myMotor1->setSpeed(255);
  myMotor2->setSpeed(255);
  myMotor1->run(BACKWARD);
  myMotor2->run(BACKWARD);
}
 
void turnRight(int speed)
{
  myMotor1->setSpeed(200);
  myMotor2->setSpeed(200);
  myMotor1->run(FORWARD);
  myMotor2->run(BACKWARD);
}
 
void turnLeft(int speed)
{
  myMotor1->setSpeed(200);
  myMotor2->setSpeed(200);
  myMotor1->run(BACKWARD);
  myMotor2->run(FORWARD);
}
 
void loop()
{
unsigned long timeout = 0;
//Stop after the timeout
  if (millis() > timeout) {
    allOff;

if(bt.available()) {
char data = (char)bt.read();
//always reset the timeout
timeout = millis() + 1000;
switch(data) {
  case COMMAND_FORWARD:
    goForward(255);    
    break; 
  case COMMAND_BACK:
    goBackward(255);
    break;
  case COMMAND_LEFT:
    turnLeft(200);
    break;
  case COMMAND_RIGHT:
    turnRight(200);
    break;
  case COMMAND_STOP:
    allOff(0);
    break;
}
}
}
}
